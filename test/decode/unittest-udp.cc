static int UDPV4CalculateValidChecksumtest01(void) {
    uint16_t csum = 0;

    uint8_t raw_ipshdr[] = {0xd0, 0x43, 0xdc, 0xdc, 0xc0, 0xa8, 0x01, 0x3};

    uint8_t raw_udp[] = {
        0x00, 0x35, 0xcf, 0x34, 0x00, 0x55, 0x6c, 0xe0, 0x83, 0xfc, 0x81,
        0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x70,
        0x61, 0x67, 0x65, 0x61, 0x64, 0x32, 0x11, 0x67, 0x6f, 0x6f, 0x67,
        0x6c, 0x65, 0x73, 0x79, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x1c, 0x00, 0x01,
        0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01, 0x00, 0x01, 0x4b, 0x50, 0x00,
        0x12, 0x06, 0x70, 0x61, 0x67, 0x65, 0x61, 0x64, 0x01, 0x6c, 0x06,
        0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0xc0, 0x26};

    csum = *(((uint16_t *)raw_udp) + 3);

    FAIL_IF(UDPV4Checksum((uint16_t *)raw_ipshdr, (uint16_t *)raw_udp,
                          sizeof(raw_udp), csum) != 0);
    PASS;
}

static int UDPV4CalculateInvalidChecksumtest02(void) {
    uint16_t csum = 0;

    uint8_t raw_ipshdr[] = {0xd0, 0x43, 0xdc, 0xdc, 0xc0, 0xa8, 0x01, 0x3};

    uint8_t raw_udp[] = {
        0x00, 0x35, 0xcf, 0x34, 0x00, 0x55, 0x6c, 0xe0, 0x83, 0xfc, 0x81,
        0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x70,
        0x61, 0x67, 0x65, 0x61, 0x64, 0x32, 0x11, 0x67, 0x6f, 0x6f, 0x67,
        0x6c, 0x65, 0x73, 0x79, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x1c, 0x00, 0x01,
        0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01, 0x00, 0x01, 0x4b, 0x50, 0x00,
        0x12, 0x06, 0x70, 0x61, 0x67, 0x65, 0x61, 0x64, 0x01, 0x6c, 0x06,
        0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0xc0, 0x27};

    csum = *(((uint16_t *)raw_udp) + 3);

    FAIL_IF(UDPV4Checksum((uint16_t *)raw_ipshdr, (uint16_t *)raw_udp,
                          sizeof(raw_udp), csum) == 0);
    PASS;
}

static int UDPV6CalculateValidChecksumtest03(void) {
    uint16_t csum = 0;

    static uint8_t raw_ipv6[] = {
        0x00, 0x60, 0x97, 0x07, 0x69, 0xea, 0x00, 0x00, 0x86, 0x05, 0x80,
        0xda, 0x86, 0xdd, 0x60, 0x00, 0x00, 0x00, 0x00, 0x14, 0x11, 0x02,
        0x3f, 0xfe, 0x05, 0x07, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x86,
        0xff, 0xfe, 0x05, 0x80, 0xda, 0x3f, 0xfe, 0x05, 0x01, 0x04, 0x10,
        0x00, 0x00, 0x02, 0xc0, 0xdf, 0xff, 0xfe, 0x47, 0x03, 0x3e, 0xa0,
        0x75, 0x82, 0xa0, 0x00, 0x14, 0x1a, 0xc3, 0x06, 0x02, 0x00, 0x00,
        0xf9, 0xc8, 0xe7, 0x36, 0x57, 0xb0, 0x09, 0x00};

    csum = *(((uint16_t *)(raw_ipv6 + 60)));

    FAIL_IF(UDPV6Checksum((uint16_t *)(raw_ipv6 + 14 + 8),
                          (uint16_t *)(raw_ipv6 + 54), 20, csum) != 0);
    PASS;
}

static int UDPV6CalculateInvalidChecksumtest04(void) {
    uint16_t csum = 0;

    static uint8_t raw_ipv6[] = {
        0x00, 0x60, 0x97, 0x07, 0x69, 0xea, 0x00, 0x00, 0x86, 0x05, 0x80,
        0xda, 0x86, 0xdd, 0x60, 0x00, 0x00, 0x00, 0x00, 0x14, 0x11, 0x02,
        0x3f, 0xfe, 0x05, 0x07, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x86,
        0xff, 0xfe, 0x05, 0x80, 0xda, 0x3f, 0xfe, 0x05, 0x01, 0x04, 0x10,
        0x00, 0x00, 0x02, 0xc0, 0xdf, 0xff, 0xfe, 0x47, 0x03, 0x3e, 0xa0,
        0x75, 0x82, 0xa0, 0x00, 0x14, 0x1a, 0xc3, 0x06, 0x02, 0x00, 0x00,
        0xf9, 0xc8, 0xe7, 0x36, 0x57, 0xb0, 0x09, 0x01};

    csum = *(((uint16_t *)(raw_ipv6 + 60)));

    FAIL_IF(UDPV6Checksum((uint16_t *)(raw_ipv6 + 14 + 8),
                          (uint16_t *)(raw_ipv6 + 54), 20, csum) == 0);
    PASS;
}
